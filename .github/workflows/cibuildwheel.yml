name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-13, macos-14] #, ubuntu-latest, windows-latest, # mac arm needs MACOSX_DEPLOYMENT_TARGET 14 b/c of libs pulled via brew

    steps:
      - uses: actions/checkout@v4

      # see https://discourse.cmake.org/t/how-to-find-openmp-with-clang-on-macos/8860
      # and https://gist.github.com/scivision/16c2ca1dc250f54d34f1a1a35596f4a0
      - name: Install openMP (runtime) on MacOS
        if: runner.os == 'macOS'
        run: |
             brew install libomp
             export OpenMP_ROOT=$(brew --prefix)/opt/libomp

      - name: Set up QEMU for aarch64 compilation on Linux
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      # - name: Install conda on Windows
      #   if: runner.os == 'Windows'
      #   uses: conda-incubator/setup-miniconda@v3
      #   with:
      #     miniconda-version: "latest"
      #     channels: conda-forge, anaconda

      # - name: Install SuiteSparse and Pkc-Config on Windows
      #   if: runner.os == 'Windows'
      #   run: conda install -y suitesparse pkgconfig

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
    # we use skip-existing below, easier
    # if: github.event_name == 'release' && github.event.action == 'published'
    # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: cibw-*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
        # To test:
        # with:
        #  repository-url: https://test.pypi.org/legacy/
